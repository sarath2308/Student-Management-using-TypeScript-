<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap 5 JS Bundle with Popper -->
<!-- JS Bundle with correct integrity -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>

<!-- Bootstrap 5 CSS CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">



    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: #f9fafb;
        }

        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 2rem;
        }

        table {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            border-radius: 0.5rem;
            overflow: hidden;
        }

        th, td {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        th {
            background-color: #3b82f6;
            color: white;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        tr {
            transition: background-color 0.2s ease;
        }

        tr:hover {
            background-color: #f3f4f6;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
            z-index: 50;
        }

        .modal-content {
            background-color: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 28rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transform: translateY(-10px);
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-content input {
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .modal-content input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            outline: none;
        }

        .search-bar input {
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .search-bar input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            outline: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold text-gray-900 text-center mb-8">Student Management System</h1>

        <div class="flex justify-between items-center mb-6">
            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="Search by name, email, or phone..." class="w-80 px-4 py-2 border border-gray-300 rounded-lg focus:ring focus:ring-blue-200">
            </div>
            <button onclick="openAddModal()" class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg transition duration-200">Add New Student</button>
        </div>

        <table class="w-full bg-white">
            <thead>
                <tr>
                    <th class="text-left">ID</th>
                    <th class="text-left">Name</th>
                    <th class="text-left">Email</th>
                    <th class="text-left">Phone</th>
                      <th class="text-left">course</th>
                    <th class="text-left">Actions</th>
                </tr>
            </thead>
            <tbody id="studentTableBody">
                <%studentData.forEach((data,i)=>{%>
              <tr>
                <td><%=i+1%></td>
                <td><%=data.name%></td>
                <td><%=data.email%></td>
                <td><%=data.phone%></td>
                <td><%=data.course%></td>
            <td class="space-x-2">
  <button 
    class="bg-yellow-500  text-white font-semibold py-1 px-3 rounded transition duration-200" onclick="populate('<%=data._id%>','<%=data.name%>','<%=data.email%>','<%=data.phone%>','<%=data.course%>')">
    Edit
  </button>
  <button 
    class="bg-red-500 hover:bg-red-600 text-white font-semibold py-1 px-3 rounded transition duration-200" onclick="deleteStudent('<%=data._id%>')">
    Delete
  </button>
</td>

              </tr>
              <%})%>
            </tbody>
        </table>

        <!-- Modal for Adding/Editing Student -->
        <div id="addModal" class="modal">
            <div class="modal-content">
                <h2 id="addModalTitle" class="text-xl font-semibold mb-4">Add Student</h2>
                <input type="text" id="studentName" placeholder="Name" class="w-full px-3 py-2 mb-3 border border-gray-300 rounded-lg">
               <label id="nameMissing" class="text-red-600 text-sm mt-1 block"></label>
                <input type="email" id="studentEmail" placeholder="Email" class="w-full px-3 py-2 mb-3 border border-gray-300 rounded-lg">
           <label id="emailMissing" class="text-red-600 text-sm mt-1 block"></label>
                <input type="tel" id="studentPhone" placeholder="Phone" class="w-full px-3 py-2 mb-3 border border-gray-300 rounded-lg">
                  <label id="phoneMissing" class="text-red-600 text-sm mt-1 block"></label>
  <label for="course" class="block text-sm font-medium text-gray-700 mb-2">Select Course</label>
  <select id="addCourse" name="course" class="block w-full px-4 py-2 text-base text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
    <option disabled selected>Select a course</option>
    <option>Computer Science</option>
    <option>Information Technology</option>
    <option>Electronics and Communication</option>
    <option>Mechanical Engineering</option>
    <option>Civil Engineering</option>
    <option>Electrical Engineering</option>
    <option>Business Administration</option>
    <option>Psychology</option>
    <option>Biotechnology</option>
    <option>Economics</option>
  </select>
  <br><br>
                <div class="flex justify-end">
                    <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg mr-2 transition duration-200" onclick="closeModal()">Cancel</button>
                    <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition duration-200" onclick="saveStudent()">Save</button>
                </div>
            </div>
        </div>

         <div id="editModal" class="modal">
            <div class="modal-content">
                <h2 id="editModalTitle" class="text-xl font-semibold mb-4">Edit Student Info</h2>
                <input type="hidden" id="studentId">
                <input type="text" id="editName" placeholder="Name" class="w-full px-3 py-2 mb-3 border border-gray-300 rounded-lg">
                 <label id="editNameMissing" class="text-red-600 text-sm mt-1 block"></label>
                <input type="email" id="editEmail" placeholder="Email" class="w-full px-3 py-2 mb-3 border border-gray-300 rounded-lg">
                 <label id="editEmailMissing" class="text-red-600 text-sm mt-1 block"></label>
                <input type="tel" id="editPhone" placeholder="Phone" class="w-full px-3 py-2 mb-3 border border-gray-300 rounded-lg">
                   <label id="editPhoneMissing" class="text-red-600 text-sm mt-1 block"></label>
                <label for="editCourse" class="block text-sm font-medium text-gray-700 mb-2">Select Course</label>
  <select id="editCourse" name="course" class="block w-full px-4 py-2 text-base text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
    <option disabled selected>Select a course</option>
    <option>Computer Science</option>
    <option>Information Technology</option>
    <option>Electronics and Communication</option>
    <option>Mechanical Engineering</option>
    <option>Civil Engineering</option>
    <option>Electrical Engineering</option>
    <option>Business Administration</option>
    <option>Psychology</option>
    <option>Biotechnology</option>
    <option>Economics</option>
  </select>
                <div class="flex justify-end">
                    <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg mr-2 transition duration-200" onclick="closeEditModal()">Cancel</button>
                    <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition duration-200" onclick="editStudent()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const filteredStudents = students.filter(student =>
                student.name.toLowerCase().includes(searchTerm) ||
                student.email.toLowerCase().includes(searchTerm) ||
                student.phone.toLowerCase().includes(searchTerm)
            );
            renderTable(filteredStudents);
        });

        function openAddModal() {
            document.getElementById('studentId').value = '';
            document.getElementById('studentName').value = '';
            document.getElementById('studentEmail').value = '';
            document.getElementById('studentPhone').value = '';
            document.getElementById('addModal').style.display = 'flex';
        }

        function closeModal() {
            document.getElementById('addModal').style.display = 'none';
        }
         function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }
 function populate(id,name,email,phone,course)
 {
    document.getElementById('studentId').value =id;
            document.getElementById('editName').value = name;
            document.getElementById('editEmail').value =email;
            document.getElementById('editPhone').value =phone;
             document.getElementById('editCourse').value =course;
            document.getElementById('editModal').style.display = 'flex';
 }

        // Delete student function
       function deleteStudent(id) {
  const swalWithBootstrapButtons = Swal.mixin({
    customClass: {
      confirmButton: "btn btn-success",
      cancelButton: "btn btn-danger"
    },
    buttonsStyling: false
  });

  swalWithBootstrapButtons.fire({
    title: "Are you sure?",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonText: "Yes, delete it!",
    cancelButtonText: "No, cancel!",
    reverseButtons: true
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: '/api/students',
        type: 'DELETE',
        data: { id },
        success: function (response) {
          swalWithBootstrapButtons.fire({
            title: "Deleted!",
            text: "Student has been deleted.",
            icon: "success"
          }).then(() => {
            location.reload(); // Refresh the page
          });
        },
        error: function (xhr, status, error) {
          let message = "An error occurred";

          try {
            const responseJson = JSON.parse(xhr.responseText);
            if (responseJson.message) {
              message = responseJson.message;
            }
          } catch (e) {
            // parsing failed, fallback to default message
          }

          Swal.fire({
            title: message,
            icon: 'error',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
          });
        }
      });
    } else if (result.dismiss === Swal.DismissReason.cancel) {
      swalWithBootstrapButtons.fire({
        title: "Cancelled",
        text: "The student is safe :)",
        icon: "error"
      });
    }
  });
}


        function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}
function isValidPhone(phone) {
  const phoneRegex = /^(\+91[-\s]?)?[6-9]\d{9}$/; // for Indian mobile numbers
  return phoneRegex.test(phone);
}

    function saveStudent() {
        const name = document.getElementById('studentName').value.trim();
        const email = document.getElementById('studentEmail').value.trim();
        const phone = document.getElementById('studentPhone').value.trim();
        const course = document.getElementById('addCourse').value;

        let isValid = true;

        // Clear previous error messages
        document.getElementById('nameMissing').textContent = '';
        document.getElementById('emailMissing').textContent = '';
        document.getElementById('phoneMissing').textContent = '';

        if (!name) {
            document.getElementById('nameMissing').textContent = '*Name is required';
            isValid = false;
        }

        if (!email) {
            document.getElementById('emailMissing').textContent = '*Email is required';
            isValid = false;
        } else if (!isValidEmail(email)) {
            document.getElementById('emailMissing').textContent = '*Invalid email format';
            isValid = false;
        }

        if (!phone) {
            document.getElementById('phoneMissing').textContent = '*Phone is required';
            isValid = false;
        } else if (!isValidPhone(phone)) {
            document.getElementById('phoneMissing').textContent = '*Invalid phone format';
            isValid = false;
        }

        if (course === "Select a course") {
            Swal.fire({
                title: 'Please select a course!',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            isValid = false;
        }

        if (!isValid) return;

        $.ajax({
          url: '/api/students', 
          type: 'POST',         
          data: {name,email,phone,course},
          success: function (response) {
           Swal.fire({
            title: 'Student saved successfully!',
            icon: 'success',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 2000
        }).then(()=>
    {
       closeModal();
       location.reload()
    })
            
          },
          error: function(xhr, status, error) {
    let message = "An error occurred"; // default message

    try {
        const responseJson = JSON.parse(xhr.responseText);
        if (responseJson.message) {
            message = responseJson.message;
        }
    } catch (e) {
        // If parsing fails, keep default message
    }

    Swal.fire({
        title: message,
        icon: 'error',
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
    });
}
        });
        }

       function editStudent()
       {
        const id=document.getElementById("studentId").value.trim()
         const name = document.getElementById('editName').value.trim();
        const email = document.getElementById('editEmail').value.trim();
        const phone = document.getElementById('editPhone').value.trim();
        const course = document.getElementById('editCourse').value;

        let isValid = true;

        // Clear previous error messages
        document.getElementById('editNameMissing').textContent = '';
        document.getElementById('editEmailMissing').textContent = '';
        document.getElementById('editPhoneMissing').textContent = '';

        if (!name) {
            document.getElementById('editNameMissing').textContent = '*Name is required';
            isValid = false;
        }

        if (!email) {
            document.getElementById('editEmailMissing').textContent = '*Email is required';
            isValid = false;
        } else if (!isValidEmail(email)) {
            document.getElementById('editEmailMissing').textContent = '*Invalid email format';
            isValid = false;
        }

        if (!phone) {
            document.getElementById('editPhoneMissing').textContent = '*Phone is required';
            isValid = false;
        } else if (!isValidPhone(phone)) {
            document.getElementById('editPhoneMissing').textContent = '*Invalid phone format';
            isValid = false;
        }

        if (course === "Select a course") {
            Swal.fire({
                title: 'Please select a course!',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            isValid = false;
        }

        if (!isValid) return;

        $.ajax({
          url: '/api/students', 
          type: 'PATCH',         
          data: {id,name,email,phone,course},
          success: function (response) {
           Swal.fire({
            title: 'Student updated successfully!',
            icon: 'success',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 2000
        }).then(()=>
    {
       closeEditModal();
       location.reload()
    })
          },
          error: function(xhr, status, error) {
    let message = "An error occurred"; // default message

    try {
        const responseJson = JSON.parse(xhr.responseText);
        if (responseJson.message) {
            message = responseJson.message;
        }
    } catch (e) {
        // If parsing fails, keep default message
    }

    Swal.fire({
        title: message,
        icon: 'error',
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
    });
}
        });
        }
    


    </script>
</body>
</html>